name: Build and Deploy to GitHub Pages and Weekly Archive

on:
  push:
    branches: [ "main" ]
    paths:
      - deploy.yaml
      - '**/*'
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-archive-status:
    runs-on: ubuntu-latest
    outputs:
      should_archive: ${{ steps.check.outputs.should_archive }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Determine if archive should be executed
        id: check
        run: |
          # If manually triggered, force archive
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manually triggered workflow, forcing archive."
            echo "should_archive=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if deploy.yaml was modified
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            DEPLOY_CHANGED=$(git diff HEAD~1 --name-only | grep -c '^deploy.yaml$' || echo 0)
          else
            DEPLOY_CHANGED=0
          fi

          if [[ "$DEPLOY_CHANGED" -gt 0 ]]; then
            echo "Deploy.yaml file changed, triggering archive."
            echo "should_archive=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if the archive was already created this week
          if git ls-remote --exit-code origin weekly-achieve >/dev/null 2>&1; then
            LAST_ARCHIVE_DATE=$(git log origin/weekly-achieve --pretty=format:"%cs" | head -1 || echo "1970-01-01")
          else
            LAST_ARCHIVE_DATE="1970-01-01"
          fi

          CURRENT_WEEK=$(date +%Y-%U)
          LAST_ARCHIVE_WEEK=$(date -d "$LAST_ARCHIVE_DATE" +%Y-%U || echo "1970-01")
          if [[ "$CURRENT_WEEK" != "$LAST_ARCHIVE_WEEK" ]]; then
            echo "should_archive=true" >> $GITHUB_OUTPUT
          else
            echo "should_archive=false" >> $GITHUB_OUTPUT
          fi

  build:
    if: ${{ needs.check-archive-status.outputs.should_archive == 'true' }}
    needs: check-archive-status
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Update apt-get package lists
        run: sudo apt-get update

      - name: Install TeX Live and dependencies
        run: |
          sudo apt-get install -y \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-latex-extra \
            texlive-lang-chinese \
            latexmk

      - name: Install siunitx package
        run: sudo apt -y install texlive-science

      - name: Compile LaTeX document using latexmk
        run: |
          latexmk -xelatex -synctex=1 -interaction=nonstopmode main.tex

      - name: Copy compiled PDF to public folder
        run: |
          mkdir -p public
          mv main.pdf public/

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages

  prepare-archive:
    if: ${{ needs.check-archive-status.outputs.should_archive == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Create archive directory and get files
        run: |
          mkdir -p archive
          if [[ ! -f main.pdf ]]; then
            echo "Fetching main.pdf from gh-pages branch."
            git fetch origin gh-pages
            git checkout origin/gh-pages -- main.pdf || {
              echo "Error: Unable to fetch main.pdf from gh-pages branch."
              exit 1
            }
            mv main.pdf archive/main.pdf
          fi

          echo "Fetching other files from main branch."
          git fetch origin main
          git checkout origin/main -- README.md || echo "README.md not found in main branch. Proceeding without it."

          if [[ ! -f source.zip ]]; then
            echo "source.zip not found in main branch. Creating an empty source.zip."
            zip -r source.zip archive/
          fi

      - name: Compress source files into source.zip
        run: |
          zip -r source.zip . -x archive/**\* .git/**\*

      - name: Upload artifact for hash calculation
        uses: actions/upload-artifact@v3
        with:
          name: archive-files
          path: |
            archive/main.pdf
            source.zip

  calculate-hash:
    if: ${{ needs.check-archive-status.outputs.should_archive == 'true' }}
    needs: prepare-archive
    runs-on: ubuntu-latest
    steps:
      - name: Download archive artifact
        uses: actions/download-artifact@v3
        with:
          name: archive-files

      - name: Calculate MD5 and SHA256 hashes
        id: hash
        run: |
          MD5=$(md5sum source.zip | awk '{ print $1 }')
          HASH=$(sha256sum source.zip | awk '{ print $1 }')
          echo "MD5=$MD5" >> $GITHUB_ENV
          echo "HASH=$HASH" >> $GITHUB_ENV

  update-readme:
    if: ${{ needs.check-archive-status.outputs.should_archive == 'true' }}
    needs: [prepare-archive, calculate-hash]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Download archive artifact
        uses: actions/download-artifact@v3
        with:
          name: archive-files

      - name: Configure Git user identity
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Initialize or check out weekly-achieve branch
        run: |
          # Fetch the weekly-achieve branch if it exists, or create it as an orphan
          git fetch origin weekly-achieve || echo "No remote weekly-achieve branch exists yet."
          git checkout weekly-achieve || git checkout --orphan weekly-achieve
          ls -l

      - name: Ensure files exist before moving
        run: |
          # Check if source.zip and archive/ exist
          if [[ ! -f source.zip ]]; then
            echo "ERROR: source.zip not found."
            exit 1
          fi
          if [[ ! -d archive ]]; then
            echo "ERROR: archive/ directory not found."
            exit 1
          fi
          ls -l source.zip archive/

      - name: Move generated files to branch
        run: |
          # Move files to the correct location in the repository
          mv source.zip ./archive-output/source.zip
          mv archive/ ./archive-output/compile/
          ls -l ./archive-output

      - name: Commit and push updates to weekly-achieve branch
        run: |
          git add ./archive-output/*
          git commit -m "Weekly archive update" || echo "No changes to commit."
          git push origin weekly-achieve --force
